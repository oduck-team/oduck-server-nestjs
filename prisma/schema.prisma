generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id        Int       @id @default(autoincrement())
  loginType LoginType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  memberProfile MemberProfile?
  authSocial    AuthSocial?
  authPassword  AuthPassword?
  threads       Thread[]
  reviews       Review[]
  bookmarks     Bookmark[]
  reviewLikes   ReviewLike[]
}

model MemberProfile {
  id        Int      @id @default(autoincrement())
  memberId  Int      @unique
  name      String
  info      String?  @db.VarChar(100)
  role      Role     @default(MEMBER)
  imageUrl  String?
  point     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  member    Member   @relation(fields: [memberId], references: [id])
}

model AuthSocial {
  id       Int     @id @default(autoincrement())
  memberId Int     @unique
  socialId String  @unique
  email    String?
  type     String
  member   Member  @relation(fields: [memberId], references: [id])
}

model AuthPassword {
  id        Int      @id @default(autoincrement())
  memberId  Int      @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  member    Member   @relation(fields: [memberId], references: [id])
}

model Animation {
  id             Int           @id @default(autoincrement())
  name           String
  plot           String
  broadcastType  BroadcastType
  episodeNumber  Int           @default(0)
  imageUrl       String
  rating         Rating
  primaryKeyword String
  status         Status
  isReleased     Boolean       @default(false)
  viewCount      Int           @default(0)
  reviewCount    Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  deletedAt      DateTime?

  studios         AnimationStudio[]
  genres          AnimationGenre[]
  voiceActors     AnimationVoiceActor[]
  originalWorkers AnimationOriginalWorker[]
  keywords        Keyword[]
  seasons         Season[]
  bookmarks       Bookmark[]
}

model AnimationGenre {
  animationId Int
  genreId     Int

  animation Animation @relation(fields: [animationId], references: [id], onDelete: Cascade)
  genre     Genre     @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@id([animationId, genreId])
}

model AnimationStudio {
  animationId Int
  studioId    Int
  animation   Animation @relation(fields: [animationId], references: [id], onDelete: Cascade)
  studio      Studio    @relation(fields: [studioId], references: [id], onDelete: Cascade)

  @@id([animationId, studioId])
}

model AnimationVoiceActor {
  animationId  Int
  voiceActorId Int

  animation  Animation  @relation(fields: [animationId], references: [id], onDelete: Cascade)
  voiceActor VoiceActor @relation(fields: [voiceActorId], references: [id], onDelete: Cascade)

  @@id([animationId, voiceActorId])
}

model AnimationOriginalWorker {
  animationId      Int
  originalWorkerId Int

  animation      Animation      @relation(fields: [animationId], references: [id], onDelete: Cascade)
  originalWorker OriginalWorker @relation(fields: [originalWorkerId], references: [id], onDelete: Cascade)

  @@id([animationId, originalWorkerId])
}

model Genre {
  id        Int       @id @default(autoincrement())
  type      GenreType @unique
  createdAt DateTime  @default(now())

  animations AnimationGenre[]
}

model Studio {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  animations AnimationStudio[]
}

model VoiceActor {
  id         Int                   @id @default(autoincrement())
  name       String                @unique
  createdAt  DateTime              @default(now())
  animations AnimationVoiceActor[]
}

model OriginalWorker {
  id         Int                       @id @default(autoincrement())
  name       String                    @unique
  createdAt  DateTime                  @default(now())
  animations AnimationOriginalWorker[]
}

model Keyword {
  id          Int       @id @default(autoincrement())
  animationId Int
  keyword     String
  createdAt   DateTime  @default(now())
  animation   Animation @relation(fields: [animationId], references: [id])
}

model Season {
  id          Int       @id @default(autoincrement())
  animationId Int
  year        Int       @default(0)
  quarter     Int       @default(0)
  createdAt   DateTime  @default(now())
  animation   Animation @relation(fields: [animationId], references: [id], onDelete: Cascade)
}

model Review {
  id          Int        @id @default(autoincrement())
  memberId    Int
  animationId Int
  type        ReviewType
  rating      Int        @default(0)
  likeCount   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  deletedAt   DateTime?

  member           Member            @relation(fields: [memberId], references: [id])
  shortReview      ShortReview?
  longReview       LongReview?
  attractionPoints AttractionPoint[]
  reviewLikes      ReviewLike[]
}

model ShortReview {
  reviewId   Int     @unique
  comment    String  @db.VarChar(150)
  hasSpoiler Boolean
  review     Review  @relation(fields: [reviewId], references: [id])
}

model LongReview {
  reviewId Int    @unique
  title    String
  content  String @db.VarChar(2000)
  review   Review @relation(fields: [reviewId], references: [id])
}

model LongReviewImage {
  id           Int      @id @default(autoincrement())
  longReviewId Int
  imageUrl     String
  createdAt    DateTime @default(now())
}

model AttractionPoint {
  id                Int               @id @default(autoincrement())
  reviewId          Int
  attractionElement AttractionElement
  createdAt         DateTime          @default(now())
  review            Review            @relation(fields: [reviewId], references: [id])
}

model MemberPointLog {
  id         Int      @id @default(autoincrement())
  memberId   Int
  reasonCode String
  reasonText String
  createdAt  DateTime @default(now())
}

model Thread {
  id        Int       @id @default(autoincrement())
  memberId  Int
  groupId   Int
  parentId  Int
  title     String
  comment   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  member Member        @relation(fields: [memberId], references: [id])
  images ThreadImage[]
}

model ThreadImage {
  id        Int      @id @default(autoincrement())
  threadId  Int
  imageUrl  String
  createdAt DateTime @default(now())
  thread    Thread   @relation(fields: [threadId], references: [id])
}

model Bookmark {
  id          Int      @id @default(autoincrement())
  memberId    Int
  animationId Int
  createdAt   DateTime @default(now())

  member    Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  animation Animation @relation(fields: [animationId], references: [id], onDelete: Cascade)
}

model ReviewLike {
  id        Int      @id @default(autoincrement())
  memberId  Int
  reviewId  Int
  createdAt DateTime @default(now())

  member Member @relation(fields: [memberId], references: [id])
  review Review @relation(fields: [reviewId], references: [id])
}

enum LoginType {
  LOCAL
  SOCIAL
}

enum Role {
  GUEST
  MEMBER
  ADMIN
}

enum BroadcastType {
  TVA
  OVA
  ONA
  MOV
}

enum Rating {
  ADULT
  FIFTEEN
  TWELVE
  ALL
}

enum Status {
  FINISHED
  ONGOING
  UPCOMING
  UNKNOWN
}

enum GenreType {
  FANTASY
  SF
  ROMANCE
  ACTION
  ADVANTURE
  ANOTHER_WORLD
  FAMILY
  GAG
  TOUCHING
  CRIME
  DRAMA
}

enum ReviewType {
  SHORT
  LONG
}

enum AttractionElement {
  PAINTING
  STORY
  BGM
  CHARACTER
  ACTION
  IMMERSIBILITY
}
