generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id            Int       @id @default(autoincrement())
  loginType     LoginType
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  memberProfile MemberProfile?
  authSocial    AuthSocial?
  authPassword  AuthPassword?
  threads       Thread[]
  reviews       Review[]
  bookmarks     Bookmark[]
  reviewLikes   ReviewLike[]
}

model MemberProfile {
  id        Int       @id @default(autoincrement())
  memberId  Int       @unique
  name      String
  role      Role      @default(USER)
  imageUrl  String?
  point     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  member    Member    @relation(fields: [memberId], references: [id])
}

model AuthSocial {
  id        Int     @id @default(autoincrement())
  memberId  Int     @unique
  socialId  String
  type      String
  member    Member  @relation(fields: [memberId], references: [id])
}

model AuthPassword {
  id        Int       @id @default(autoincrement())
  memberId  Int       @unique
  hash      String
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  member    Member    @relation(fields: [memberId], references: [id])
}

model Animation {
  id                    Int       @id @default(autoincrement())
  name                  String
  plot                  String
  broadcastType         BroadcastType
  episodeNumber         Int       @default(0)
  imageUrl              String
  rating                Rating
  primaryKeyword        String
  status                Status
  isReleased            Boolean   @default(false)
  viewCount             Int       @default(0)
  reviewCount           Int       @default(0)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  deletedAt             DateTime?

  animationGenres       AnimationGenre[]
  animationStudioList   AnimationStudio[]
  animationVoiceActors  AnimationVoiceActor[]
  originalWorkers       AnimationOriginalWorker[]
  keywords              Keyword[]
  seasons               Season[]
  bookmarks             Bookmark[]
}

model AnimationGenre {
  id          Int       @id @default(autoincrement())
  animationId Int
  genreId     Int

  animation   Animation @relation(fields: [animationId], references: [id])
  genre       Genre     @relation(fields: [genreId], references: [id])
}

model AnimationStudio {
  id          Int       @id @default(autoincrement())
  animationId Int
  studioId    Int

  animation   Animation @relation(fields: [animationId], references: [id])
  studio      Studio    @relation(fields: [studioId], references: [id])
}

model AnimationVoiceActor {
  id            Int         @id @default(autoincrement())
  animationId   Int
  voiceActorId  Int

  animation     Animation   @relation(fields: [animationId], references: [id])
  voiceActor    VoiceActor  @relation(fields: [voiceActorId], references: [id])
}

model AnimationOriginalWorker {
  id                Int             @id @default(autoincrement())
  animationId       Int
  originalWorkerId  Int

  animation         Animation       @relation(fields: [animationId], references: [id])
  originalWorker    OriginalWorker  @relation(fields: [originalWorkerId], references: [id])
}

model Genre {
  id              Int       @id @default(autoincrement())
  type            GenreType
  createdAt       DateTime  @default(now())
  animationGenres AnimationGenre[]
}

model Studio {
  id                  Int       @id @default(autoincrement())
  name                String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  animationStudioList AnimationStudio[]
}

model VoiceActor {
  id                    Int       @id @default(autoincrement())
  name                  String
  createdAt             DateTime  @default(now())
  animationVoiceActors  AnimationVoiceActor[]
}

model OriginalWorker {
  id                        Int       @id @default(autoincrement())
  name                      String
  createdAt                 DateTime  @default(now())
  animationOriginalWorkers  AnimationOriginalWorker[]
}

model Keyword {
  id          Int       @id @default(autoincrement())
  animationId Int
  keyword     String
  createdAt   DateTime  @default(now())
  animation   Animation @relation(fields: [animationId], references: [id])
}

model Season {
  id          Int       @id @default(autoincrement())
  animationId Int
  year        Int       @default(0)
  quarter     Int       @default(0)
  createdAt   DateTime  @default(now())
  animation   Animation @relation(fields: [animationId], references: [id])
}

model Review {
  id                Int       @id @default(autoincrement())
  memberId          Int
  animationId       Int
  type              ReviewType
  rating            Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  member            Member    @relation(fields: [memberId], references: [id])
  shortReview       ShortReview?
  longReview        LongReview?
  attractionPoints  AttractionPoint[]
  reviewLikes       ReviewLike[]
}

model ShortReview {
  id        Int     @id @default(autoincrement())
  reviewId  Int     @unique
  comment   String
  review    Review  @relation(fields: [reviewId], references: [id])
}

model LongReview {
  id        Int     @id @default(autoincrement())
  reviewId  Int     @unique
  title     String
  content   String
  review    Review  @relation(fields: [reviewId], references: [id])
  images    LongReviewImage[]
}

model LongReviewImage {
  id            Int         @id @default(autoincrement())
  longReviewId  Int
  imageUrl      String
  createdAt     DateTime    @default(now())
  longReview    LongReview  @relation(fields: [longReviewId], references: [id])
}

model MemberPointLog {
  id          Int       @id @default(autoincrement())
  memberId    Int
  reasonCode  String
  reasonText  String
  createdAt   DateTime  @default(now())
}

model AttractionPoint {
  id                Int       @id @default(autoincrement())
  reviewId          Int
  attractionElement AttractionElement
  createdAt         DateTime  @default(now())
  review            Review    @relation(fields: [reviewId], references: [id])
}

model Thread {
  id        Int       @id @default(autoincrement())
  memberId  Int
  groupId   Int
  parentId  Int
  title     String
  comment   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  member    Member    @relation(fields: [memberId], references: [id])
  images    ThreadImage[]
}

model ThreadImage {
  id        Int       @id @default(autoincrement())
  threadId  Int
  imageUrl  String
  createdAt DateTime  @default(now())
  thread    Thread    @relation(fields: [threadId], references: [id])
}

model Bookmark {
  id          Int       @id @default(autoincrement())
  memberId    Int
  animationId Int
  createdAt   DateTime  @default(now())

  member      Member    @relation(fields: [memberId], references: [id])
  animation   Animation @relation(fields: [animationId], references: [id])
}

model ReviewLike {
  id        Int       @id @default(autoincrement())
  memberId  Int
  reviewId  Int
  createdAt DateTime  @default(now())

  member    Member    @relation(fields: [memberId], references: [id])
  review    Review    @relation(fields: [reviewId], references: [id])
}

enum LoginType {
  LOCAL
  SOCIAL
}

enum Role {
  GUEST
  USER
  ADMIN
}

enum BroadcastType {
  TVA
  OVA
  ONA
  MOV
}

enum Rating {
  ADULT
  FIFTEEN
  TWELVE
  ALL
}

enum Status {
  FINISHED
  ONGOING
  UPCOMING
  UNKNOWN
}

enum GenreType {
  FANTASY
  SF
  ROMANCE
  ACTION
  ADVANTURE
  ANOTHER_WORLD
  FAMILY
  GAG
  TOUCHING
  CRIME
  DRAMA
}

enum ReviewType {
  SHORT
  LONG
}

enum AttractionElement {
  PAINTING
  STORY
  BGM
  CHARACTER
  ACTION
  IMMERSIBILITY
}